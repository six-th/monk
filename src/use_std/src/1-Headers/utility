
#include <initializer_list>
namespace std {
  // 运算符：
  namespace rel_ops {
    template<class T> bool operator!=(const T&, const T&);
    template<class T> bool operator> (const T&, const T&);
    template<class T> bool operator<=(const T&, const T&);
    template<class T> bool operator>=(const T&, const T&);
  }
  // swap:
  template <class T>
  void swap(T& a, T& b) noexcept(/*see definition*/ );
  template <class T, size_t N>
  void swap(T (&a)[N], T (&b)[N]) noexcept(is_nothrow_swappable_v<T>);
 
  // exchange ：
  template <class T, class U=T> T exchange(T& obj, U&& new_val);
 
  // forward/move ：
  template <class T>
  constexpr T&& forward(remove_reference_t<T>& t) noexcept;
  template <class T>
  constexpr T&& forward(remove_reference_t<T>&& t) noexcept;
  template <class T>
  constexpr remove_reference_t<T>&& move(T&&) noexcept;
  template <class T>
  constexpr conditional_t<!is_nothrow_move_constructible_v<T>
                          && is_copy_constructible_v<T>, const T&, T&&>
  move_if_noexcept(T& x) noexcept;
 
  // as_const ：
  template <class T> constexpr add_const_t<T>& as_const(T& t) noexcept;
  template <class T> void as_const(const T&&) = delete;
 
  // declval ：
  template <class T>
  add_rvalue_reference_t<T> declval() noexcept; // 作为不求值运算数
 
  // 编译时整数数列
  template<class T, T...> struct integer_sequence;
  template<size_t... I>
  using index_sequence = integer_sequence<size_t, I...>;
  template<class T, T N>
  using make_integer_sequence = integer_sequence<T, /*see definition*/ >;
  template<size_t N>
  using make_index_sequence = make_integer_sequence<size_t, N>;
  template<class... T>
  using index_sequence_for = make_index_sequence<sizeof...(T)>;
 
  // pair ：
  template <class T1, class T2> struct pair;
 
  // 对 pair 特化的算法：
  template <class T1, class T2>
  constexpr bool operator==(const pair<T1, T2>&, const pair<T1, T2>&);
  template <class T1, class T2>
  constexpr bool operator< (const pair<T1, T2>&, const pair<T1, T2>&);
  template <class T1, class T2>
  constexpr bool operator!=(const pair<T1, T2>&, const pair<T1, T2>&);
  template <class T1, class T2>
  constexpr bool operator> (const pair<T1, T2>&, const pair<T1, T2>&);
  template <class T1, class T2>
  constexpr bool operator>=(const pair<T1, T2>&, const pair<T1, T2>&);
  template <class T1, class T2>
  constexpr bool operator<=(const pair<T1, T2>&, const pair<T1, T2>&);
  template <class T1, class T2>
  void swap(pair<T1, T2>& x, pair<T1, T2>& y) noexcept(noexcept(x.swap(y)));
  template <class T1, class T2>
  constexpr /*see definition*/ make_pair(T1&&, T2&&);
 
  // 对 pair 的类 tuple 访问
  template <class T> class tuple_size;
  template <size_t I, class T> class tuple_element;
  template <class T1, class T2> struct tuple_size<pair<T1, T2>>;
  template <class T1, class T2> struct tuple_element<0, pair<T1, T2>>;
  template <class T1, class T2> struct tuple_element<1, pair<T1, T2>>;
  template<size_t I, class T1, class T2>
  constexpr tuple_element_t<I, pair<T1, T2>>& get(pair<T1, T2>&) noexcept;
  template<size_t I, class T1, class T2>
  constexpr tuple_element_t<I, pair<T1, T2>>&& get(pair<T1, T2>&&) noexcept;
  template<size_t I, class T1, class T2>
  constexpr const tuple_element_t<I, pair<T1, T2>>& get(const pair<T1, T2>&) noexcept;
  template<size_t I, class T1, class T2>
  constexpr const tuple_element_t<I, pair<T1, T2>>&& get(const pair<T1, T2>&&) noexcept;
  template <class T, class U>
  constexpr T& get(pair<T, U>& p) noexcept;
  template <class T, class U>
  constexpr const T& get(const pair<T, U>& p) noexcept;
  template <class T, class U>
  constexpr T&& get(pair<T, U>&& p) noexcept;
  template <class T, class U>
  constexpr const T&& get(const pair<T, U>&& p) noexcept;
  template <class T, class U>
  constexpr T& get(pair<U, T>& p) noexcept;
  template <class T, class U>
  constexpr const T& get(const pair<U, T>& p) noexcept;
  template <class T, class U>
  constexpr T&& get(pair<U, T>&& p) noexcept;
  template <class T, class U>
  constexpr const T&& get(const pair<U, T>&& p) noexcept;
 
  // pair 逐片构造
  struct piecewise_construct_t { };
  constexpr piecewise_construct_t piecewise_construct{};
  template <class... Types> class tuple; // 定义于 <tuple>
 
  // 原位构造
  struct in_place_t { explicit in_place_t() = default; };
  inline constexpr in_place_t in_place{};
  template <class T>
  struct in_place_type_t { explicit in_place_type_t() = default; };
  template <class T>
  inline constexpr in_place_type_t<T> in_place_type{};
  template <size_t I>
  struct in_place_index_t { explicit in_place_index_t() = default; };
  template <size_t I>
  inline constexpr in_place_index_t<I> in_place_index{};
  // 原始数值转换的浮点格式
  enum class chars_format {
    scientific = /*unspecified*/ ,
    fixed = /*unspecified*/ ,
    hex = /*unspecified*/ ,
    general = fixed | scientific
  };
  // 原始数值输出转换
  struct to_chars_result {
    char* ptr;
    error_code ec;
  };
  to_chars_result to_chars(char* first, char* last, see below value, int base = 10);
  to_chars_result to_chars(char* first, char* last, float value);
  to_chars_result to_chars(char* first, char* last, double value);
  to_chars_result to_chars(char* first, char* last, long double value);
  to_chars_result to_chars(char* first, char* last, float value, chars_format fmt);
  to_chars_result to_chars(char* first, char* last, double value, chars_format fmt);
  to_chars_result to_chars(char* first, char* last, long double value, chars_format fmt);
  to_chars_result to_chars(char* first, char* last, float value,
                           chars_format fmt, int precision);
  to_chars_result to_chars(char* first, char* last, double value,
                           chars_format fmt, int precision);
  to_chars_result to_chars(char* first, char* last, long double value,
                           chars_format fmt, int precision);
  // 原始数值输入转换
  struct from_chars_result {
    const char* ptr;
    error_code ec;
  };
  from_chars_result from_chars(const char* first, const char* last,
                               /*see description*/ & value, int base = 10);
  from_chars_result from_chars(const char* first, const char* last, float& value,
                               chars_format fmt = chars_format::general);
  from_chars_result from_chars(const char* first, const char* last, double& value,
                               chars_format fmt = chars_format::general);
  from_chars_result from_chars(const char* first, const char* last, long double& value,
                               chars_format fmt = chars_format::general);
}

///类模板 std::integer_sequence 
namespace std {
  template<class T, T... I>
  struct integer_sequence {
    using value_type = T;
    static constexpr size_t size() noexcept { return sizeof...(I); }
  };
}

///类 std::pair
namespace std {
  template <class T1, class T2>
  struct pair {
    using first_type = T1;
    using second_type = T2;
    T1 first;
    T2 second;
    pair(const pair&) = default;
    pair(pair&&) = default;
    constexpr pair();
    /*conditionally-explicit*/ constexpr pair(const T1& x, const T2& y);
    template<class U, class V>
    /*conditionally-explicit*/  constexpr pair(U&& x, V&& y);
    template<class U, class V>
    /*conditionally-explicit*/  constexpr pair(const pair<U, V>& p);
    template<class U, class V>
    /*conditionally-explicit*/  constexpr pair(pair<U, V>&& p);
    template <class... Args1, class... Args2>
    pair(piecewise_construct_t, tuple<Args1...> first_args, tuple<Args2...> second_args);
    pair& operator=(const pair& p);
    template<class U, class V> pair& operator=(const pair<U, V>& p);
    pair& operator=(pair&& p) noexcept(/*see definition*/ );
    template<class U, class V> pair& operator=(pair<U, V>&& p);
    void swap(pair& p) noexcept(/*see definition*/);
  };
}
