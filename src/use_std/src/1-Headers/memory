///概要
namespace std {
  // 指针特性
  template <class Ptr> struct pointer_traits;
  template <class T> struct pointer_traits<T*>;
  // 指针安全
  enum class pointer_safety { relaxed, preferred, strict };
  void declare_reachable(void* p);
  template <class T> T* undeclare_reachable(T* p);
  void declare_no_pointers(char* p, size_t n);
  void undeclare_no_pointers(char* p, size_t n);
  pointer_safety get_pointer_safety() noexcept;
  // 指针对齐函数
  void* align(size_t alignment, size_t size, void*& ptr, size_t& space);
  // 分配器参数标签
  struct allocator_arg_t { explicit allocator_arg_t() = default; };
  constexpr allocator_arg_t allocator_arg{};
  // uses_allocator
  template <class T, class Alloc> struct uses_allocator;
  // 分配器特性
  template <class Alloc> struct allocator_traits;
  // 默认分配器
  template <class T> class allocator;
  template <class T, class U>
  bool operator==(const allocator<T>&, const allocator<U>&) noexcept;
  template <class T, class U>
  bool operator!=(const allocator<T>&, const allocator<U>&) noexcept;
  // 特化的算法
  template <class T> constexpr T* addressof(T& r) noexcept;
  template <class T> const T* addressof(const T&&) = delete;
  template <class ForwardIterator>
  void uninitialized_default_construct(ForwardIterator first, ForwardIterator last);
  template <class ExecutionPolicy, class ForwardIterator>
  void uninitialized_default_construct(ExecutionPolicy&& exec,
                                       ForwardIterator first, ForwardIterator last);
  template <class ForwardIterator, class Size>
  ForwardIterator uninitialized_default_construct_n(ForwardIterator first, Size n);
  template <class ExecutionPolicy, class ForwardIterator, class Size>
  ForwardIterator uninitialized_default_construct_n(ExecutionPolicy&& exec,
                                                    ForwardIterator first, Size n);
  template <class ForwardIterator>
  void uninitialized_value_construct(ForwardIterator first, ForwardIterator last);
  template <class ExecutionPolicy, class ForwardIterator>
  void uninitialized_value_construct(ExecutionPolicy&& exec,
                                     ForwardIterator first, ForwardIterator last);
  template <class ForwardIterator, class Size>
  ForwardIterator uninitialized_value_construct_n(ForwardIterator first, Size n);
  template <class ExecutionPolicy, class ForwardIterator, class Size>
  ForwardIterator uninitialized_value_construct_n(ExecutionPolicy&& exec,
                                                  ForwardIterator first, Size n);
  template <class InputIterator, class ForwardIterator>
  ForwardIterator uninitialized_copy(InputIterator first, InputIterator last,
                                     ForwardIterator result);
  template <class ExecutionPolicy, class InputIterator, class ForwardIterator>
  ForwardIterator uninitialized_copy(ExecutionPolicy&& exec,
                                     InputIterator first, InputIterator last,
                                     ForwardIterator result);
  template <class InputIterator, class Size, class ForwardIterator>
  ForwardIterator uninitialized_copy_n(InputIterator first, Size n,
                                       ForwardIterator result);
  template <class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
  ForwardIterator uninitialized_copy_n(ExecutionPolicy&& exec,
                                       InputIterator first, Size n,
                                       ForwardIterator result);
  template <class InputIterator, class ForwardIterator>
  ForwardIterator uninitialized_move(InputIterator first, InputIterator last,
                                     ForwardIterator result);
  template <class ExecutionPolicy, class InputIterator, class ForwardIterator>
  ForwardIterator uninitialized_move(ExecutionPolicy&& exec,
                                     InputIterator first, InputIterator last,
                                     ForwardIterator result);
  template <class InputIterator, class Size, class ForwardIterator>
  pair<InputIterator, ForwardIterator>
    uninitialized_move_n(InputIterator first, Size n, ForwardIterator result);
  template <class ExecutionPolicy, class InputIterator, class Size, class ForwardIterator>
  pair<InputIterator, ForwardIterator>
    uninitialized_move_n(ExecutionPolicy&& exec,
                         InputIterator first, Size n, ForwardIterator result);
  template <class ForwardIterator, class T>
  void uninitialized_fill(ForwardIterator first, ForwardIterator last, const T& x);
  template <class ExecutionPolicy, class ForwardIterator, class T>
  void uninitialized_fill(ExecutionPolicy&& exec,
                          ForwardIterator first, ForwardIterator last, const T& x);
  template <class ForwardIterator, class Size, class T>
  ForwardIterator uninitialized_fill_n(ForwardIterator first, Size n, const T& x);
  template <class ExecutionPolicy, class ForwardIterator, class Size, class T>
  ForwardIterator uninitialized_fill_n(ExecutionPolicy&& exec,
                                       ForwardIterator first, Size n, const T& x);
  template <class T>
  void destroy_at(T* location);
  template <class ForwardIterator>
  void destroy(ForwardIterator first, ForwardIterator last);
  template <class ExecutionPolicy, class ForwardIterator>
  void destroy(ExecutionPolicy&& exec, ForwardIterator first, ForwardIterator last);
  template <class ForwardIterator, class Size>
  ForwardIterator destroy_n(ForwardIterator first, Size n);
  template <class ExecutionPolicy, class ForwardIterator, class Size>
  ForwardIterator destroy_n(ExecutionPolicy&& exec, ForwardIterator first, Size n);
  // 类模板 unique_ptr
  template <class T> struct default_delete;
  template <class T> struct default_delete<T[]>;
  template <class T, class D = default_delete<T>> class unique_ptr;
  template <class T, class D> class unique_ptr<T[], D>;
  template <class T, class... Args> unique_ptr<T> make_unique(Args&&... args);
  template <class T> unique_ptr<T> make_unique(size_t n);
  template <class T, class... Args> /*unspecified*/ make_unique(Args&&...) = delete;
  template <class T, class D> void swap(unique_ptr<T, D>& x, unique_ptr<T, D>& y) noexcept;
  template <class T1, class D1, class T2, class D2>
  bool operator==(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
  bool operator!=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
  bool operator<(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
  bool operator<=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
  bool operator>(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T1, class D1, class T2, class D2>
  bool operator>=(const unique_ptr<T1, D1>& x, const unique_ptr<T2, D2>& y);
  template <class T, class D>
  bool operator==(const unique_ptr<T, D>& x, nullptr_t) noexcept;
  template <class T, class D>
  bool operator==(nullptr_t, const unique_ptr<T, D>& y) noexcept;
  template <class T, class D>
  bool operator!=(const unique_ptr<T, D>& x, nullptr_t) noexcept;
  template <class T, class D>
  bool operator!=(nullptr_t, const unique_ptr<T, D>& y) noexcept;
  template <class T, class D>
  bool operator<(const unique_ptr<T, D>& x, nullptr_t);
  template <class T, class D>
  bool operator<(nullptr_t, const unique_ptr<T, D>& y);
  template <class T, class D>
  bool operator<=(const unique_ptr<T, D>& x, nullptr_t);
  template <class T, class D>
  bool operator<=(nullptr_t, const unique_ptr<T, D>& y);
  template <class T, class D>
  bool operator>(const unique_ptr<T, D>& x, nullptr_t);
  template <class T, class D>
  bool operator>(nullptr_t, const unique_ptr<T, D>& y);
  template <class T, class D>
  bool operator>=(const unique_ptr<T, D>& x, nullptr_t);
  template <class T, class D>
  bool operator>=(nullptr_t, const unique_ptr<T, D>& y);
  // 类 bad_weak_ptr
  class bad_weak_ptr;
  // 类模板 shared_ptr
  template<class T> class shared_ptr;
  // shared_ptr 创建
  template<class T, class... Args> shared_ptr<T> make_shared(Args&&... args);
  template<class T, class A, class... Args>
  shared_ptr<T> allocate_shared(const A& a, Args&&... args);
  // shared_ptr 比较
  template<class T, class U>
  bool operator==(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
  bool operator!=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
  bool operator<(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
  bool operator>(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
  bool operator<=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
  bool operator>=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template <class T>
  bool operator==(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
  bool operator==(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
  bool operator!=(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
  bool operator!=(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
  bool operator<(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
  bool operator<(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
  bool operator<=(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
  bool operator<=(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
  bool operator>(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
  bool operator>(nullptr_t, const shared_ptr<T>& y) noexcept;
  template <class T>
  bool operator>=(const shared_ptr<T>& x, nullptr_t) noexcept;
  template <class T>
  bool operator>=(nullptr_t, const shared_ptr<T>& y) noexcept;
  // shared_ptr 特化算法
  template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;
  // shared_ptr 转型
  template<class T, class U>
  shared_ptr<T> static_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
  shared_ptr<T> dynamic_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
  shared_ptr<T> const_pointer_cast(const shared_ptr<U>& r) noexcept;
  // shared_ptr get_deleter
  template<class D, class T> D* get_deleter(const shared_ptr<T>& p) noexcept;
  // shared_ptr I/O
  template<class E, class T, class Y>
  basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, const shared_ptr<Y>& p);
  // 类模板 weak_ptr
  template<class T> class weak_ptr;
  // weak_ptr specialized algorithms
  template<class T> void swap(weak_ptr<T>& a, weak_ptr<T>& b) noexcept;
  // 类模板 owner_less
  template<class T = void> struct owner_less;
  // 类模板 enable_shared_from_this
  template<class T> class enable_shared_from_this;
  // shared_ptr 原子访问
  template<class T>
  bool atomic_is_lock_free(const shared_ptr<T>* p);
  template<class T>
  shared_ptr<T> atomic_load(const shared_ptr<T>* p);
  template<class T>
  shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
  template<class T>
  void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
  template<class T>
  void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
  template<class T>
  shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
  template<class T>
  shared_ptr<T> atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r,
                                         memory_order mo);
  template<class T>
  bool atomic_compare_exchange_weak(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
  template<class T>
  bool atomic_compare_exchange_strong(shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
  template<class T>
  bool atomic_compare_exchange_weak_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
                                             shared_ptr<T> w, memory_order success,
                                             memory_order failure);
  template<class T>
  bool atomic_compare_exchange_strong_explicit(shared_ptr<T>* p, shared_ptr<T>* v,
                                               shared_ptr<T> w, memory_order success, 
                                               memory_order failure);
  // 哈希支持
  template <class T> struct hash;
  template <class T, class D> struct hash<unique_ptr<T, D>>;
  template <class T> struct hash<shared_ptr<T>>;
  // uses_allocator
  template <class T, class Alloc>
  constexpr bool uses_allocator_v = uses_allocator<T, Alloc>::value;
}

///类模板 std::pointer_traits
namespace std {
  template <class Ptr> struct pointer_traits {
    using pointer = Ptr;
    using element_type = /*see definition*/ ;
    using difference_type = /*see definition*/ ;
    template <class U> using rebind = /*see definition*/ ;
    static pointer pointer_to(/*see definition*/ r);
  };
  template <class T> struct pointer_traits<T*> {
    using pointer = T*;
    using element_type = T;
    using difference_type = ptrdiff_t;
    template <class U> using rebind = U*;
    static pointer pointer_to(/*see definition*/ r) noexcept;
  };
}

///类模板 std::allocator_traits
namespace std {
  template <class Alloc> struct allocator_traits {
    using allocator_type = Alloc;
    using value_type = typename Alloc::value_type;
    using pointer = /*see definition*/ ;
    using const_pointer = /*see definition*/ ;
    using void_pointer = /*see definition*/ ;
    using const_void_pointer = /*see definition*/ ;
    using difference_type = /*see definition*/ ;
    using size_type = /*see definition*/ ;
    using propagate_on_container_copy_assignment = /*see definition*/ ;
    using propagate_on_container_move_assignment = /*see definition*/ ;
    using propagate_on_container_swap = /*see definition*/ ;
    using is_always_equal = /*see definition*/ ;
    template <class T> using rebind_alloc = /*see definition*/ ;
    template <class T> using rebind_traits = allocator_traits<rebind_alloc<T>>;
    static pointer allocate(Alloc& a, size_type n);
    static pointer allocate(Alloc& a, size_type n, const_void_pointer hint);
    static void deallocate(Alloc& a, pointer p, size_type n);
    template <class T, class... Args>
    static void construct(Alloc& a, T* p, Args&&... args);
    template <class T>
    static void destroy(Alloc& a, T* p);
    static size_type max_size(const Alloc& a) noexcept;
    static Alloc select_on_container_copy_construction(const Alloc& rhs);
  };
}

///类模板 std::allocator
namespace std {
  template <class T> class allocator {
  public:
    using value_type = T;
    using propagate_on_container_move_assignment = true_type;
    using is_always_equal = true_type;
    allocator() noexcept;
    allocator(const allocator&) noexcept;
    template <class U> allocator(const allocator<U>&) noexcept;
    ~allocator();
    T* allocate(size_t n);
    void deallocate(T* p, size_t n);
  };
}

///类模板 std::default_delete
namespace std {
  template <class T>
  struct default_delete {
    constexpr default_delete() noexcept = default;
    template <class U> default_delete(const default_delete<U>&) noexcept;
    void operator()(T*) const;
  };
  template <class T>
  struct default_delete<T[]> {
    constexpr default_delete() noexcept = default;
    template <class U> default_delete(const default_delete<U[]>&) noexcept;
    template <class U> void operator()(U* ptr) const;
  };
}

///类模板 std::unique_ptr
namespace std {
  template <class T, class D = default_delete<T>>
  class unique_ptr {
  public:
    using pointer = /*see definition*/ ;
    using element_type = T;
    using deleter_type = D;
    // 构造函数
    constexpr unique_ptr() noexcept;
    explicit unique_ptr(pointer p) noexcept;
    unique_ptr(pointer p, /*see definition*/ d1) noexcept;
    unique_ptr(pointer p, /*see definition*/ d2) noexcept;
    unique_ptr(unique_ptr&& u) noexcept;
    constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }
    template <class U, class E>
    unique_ptr(unique_ptr<U, E>&& u) noexcept;
    // 析构函数
    ~unique_ptr();
    // 赋值
    unique_ptr& operator=(unique_ptr&& u) noexcept;
    template <class U, class E> unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
    unique_ptr& operator=(nullptr_t) noexcept;
    // 观察器
    add_lvalue_reference_t<T> operator*() const;
    pointer operator->() const noexcept;
    pointer get() const noexcept;
    deleter_type& get_deleter() noexcept;
    const deleter_type& get_deleter() const noexcept;
    explicit operator bool() const noexcept;
    // 修改器
    pointer release() noexcept;
    void reset(pointer p = pointer()) noexcept;
    void swap(unique_ptr& u) noexcept;
    // 禁用从左值复制
    unique_ptr(const unique_ptr&) = delete;
    unique_ptr& operator=(const unique_ptr&) = delete;
  };
 
  template <class T, class D>
  class unique_ptr<T[], D> {
  public:
    using pointer = /*see definition*/ ;
    using element_type = T;
    using deleter_type = D;
    // 构造函数
    constexpr unique_ptr() noexcept;
    template <class U> explicit unique_ptr(U p) noexcept;
    template <class U> unique_ptr(U p, /*see definition*/d) noexcept;
    template <class U> unique_ptr(U p, /*see definition*/d) noexcept;
    unique_ptr(unique_ptr&& u) noexcept;
    template <class U, class E>
    unique_ptr(unique_ptr<U, E>&& u) noexcept;
    constexpr unique_ptr(nullptr_t) noexcept : unique_ptr() { }
    // 析构函数
    ~unique_ptr();
    // 赋值
    unique_ptr& operator=(unique_ptr&& u) noexcept;
    template <class U, class E>
    unique_ptr& operator=(unique_ptr<U, E>&& u) noexcept;
    unique_ptr& operator=(nullptr_t) noexcept;
    // 观察器
    T& operator[](size_t i) const;
    pointer get() const noexcept;
    deleter_type& get_deleter() noexcept;
    const deleter_type& get_deleter() const noexcept;
    explicit operator bool() const noexcept;
    // 修改器
    pointer release() noexcept;
    template <class U> void reset(U p) noexcept;
    void reset(nullptr_t = nullptr) noexcept;
    void swap(unique_ptr& u) noexcept;
    // 禁用从左值复制
    unique_ptr(const unique_ptr&) = delete;
    unique_ptr& operator=(const unique_ptr&) = delete;
  };
}

///类 std::bad_weak_ptr
namespace std {
  class bad_weak_ptr : public exception {
  public:
    bad_weak_ptr() noexcept;
  };
}

///类模板 std::shared_ptr
namespace std {
  template<class T>
  class shared_ptr {
  public:
    using element_type = remove_extent_t<T>;
    using weak_type = weak_ptr<T>;
    // 构造函数
    constexpr shared_ptr() noexcept;
    template<class Y> explicit shared_ptr(Y* p);
    template<class Y, class D> shared_ptr(Y* p, D d);
    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
    template <class D> shared_ptr(nullptr_t p, D d);
    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
    template<class Y> shared_ptr(const shared_ptr<Y>& r, element_type* p) noexcept;
    shared_ptr(const shared_ptr& r) noexcept;
    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
    shared_ptr(shared_ptr&& r) noexcept;
    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
    constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }
    // 析构函数
    ~shared_ptr();
    // 赋值
    shared_ptr& operator=(const shared_ptr& r) noexcept;
    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
    shared_ptr& operator=(shared_ptr&& r) noexcept;
    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r) noexcept;
    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);
    // 修改器
    void swap(shared_ptr& r) noexcept;
    void reset() noexcept;
    template<class Y> void reset(Y* p);
    template<class Y, class D> void reset(Y* p, D d);
    template<class Y, class D, class A> void reset(Y* p, D d, A a);
    // 观察器
    element_type* get() const noexcept;
    T& operator*() const noexcept;
    T* operator->() const noexcept;
    element_type& operator[](ptrdiff_t i) const;
    long use_count() const noexcept;
    explicit operator bool() const noexcept;
    template<class U> bool owner_before(const shared_ptr<U>& b) const;
    template<class U> bool owner_before(const weak_ptr<U>& b) const;
  };
}

///类模板 std::weak_ptr
namespace std {
  template<class T>
  class weak_ptr {
  public:
    using element_type = T;
    // 构造函数
    constexpr weak_ptr() noexcept;
    template<class Y> weak_ptr(const shared_ptr<Y>& r) noexcept;
    weak_ptr(const weak_ptr& r) noexcept;
    template<class Y> weak_ptr(const weak_ptr<Y>& r) noexcept;
    weak_ptr(weak_ptr&& r) noexcept;
    template<class Y> weak_ptr(weak_ptr<Y>&& r) noexcept;
    // 析构函数
    ~weak_ptr();
    // 赋值
    weak_ptr& operator=(const weak_ptr& r) noexcept;
    template<class Y> weak_ptr& operator=(const weak_ptr<Y>& r) noexcept;
    template<class Y> weak_ptr& operator=(const shared_ptr<Y>& r) noexcept;
    weak_ptr& operator=(weak_ptr&& r) noexcept;
    template<class Y> weak_ptr& operator=(weak_ptr<Y>&& r) noexcept;
    // 修改器
    void swap(weak_ptr& r) noexcept;
    void reset() noexcept;
    // 观察器
    long use_count() const noexcept;
    bool expired() const noexcept;
    shared_ptr<T> lock() const noexcept;
    template<class U> bool owner_before(const shared_ptr<U>& b) const;
    template<class U> bool owner_before(const weak_ptr<U>& b) const;
  };
}

///类模板 std::owner_less
namespace std {
  template<class T = void> struct owner_less;
  template<class T> struct owner_less<shared_ptr<T>> {
    bool operator()(const shared_ptr<T>&, const shared_ptr<T>&) const;
    bool operator()(const shared_ptr<T>&, const weak_ptr<T>&) const;
    bool operator()(const weak_ptr<T>&, const shared_ptr<T>&) const;
  };
  template<class T> struct owner_less<weak_ptr<T>> {
    bool operator()(const weak_ptr<T>&, const weak_ptr<T>&) const;
    bool operator()(const shared_ptr<T>&, const weak_ptr<T>&) const;
    bool operator()(const weak_ptr<T>&, const shared_ptr<T>&) const;
  };
  template<> struct owner_less<void> {
    template<class T, class U>
    bool operator()(const shared_ptr<T>&, const shared_ptr<U>&) const;
    template<class T, class U>
    bool operator()(const shared_ptr<T>&, const weak_ptr<U>&) const;
    template<class T, class U>
    bool operator()(const weak_ptr<T>&, const shared_ptr<U>&) const;
    template<class T, class U>
    bool operator()(const weak_ptr<T>&, const weak_ptr<U>&) const;
    using is_transparent = /*unspecified*/ ;
  };
}

///类模板 std::enable_shared_from_this
namespace std {
  template<class T> class enable_shared_from_this {
  protected:
    constexpr enable_shared_from_this() noexcept;
    enable_shared_from_this(const enable_shared_from_this&) noexcept;
    enable_shared_from_this& operator=(const enable_shared_from_this&) noexcept;
    ~enable_shared_from_this();
  public:
    shared_ptr<T> shared_from_this();
    shared_ptr<T const> shared_from_this() const;
    weak_ptr<T> weak_from_this() noexcept;
    weak_ptr<T const> weak_from_this() const noexcept;
  private:
    mutable weak_ptr<T> weak_this; // 仅为说明
  };
}