namespace std {
    // 类型 T1 、 T2 ……为未指定的实现类型
    /*T1*/ resetiosflags(ios_base::fmtflags mask);
    /*T2*/ setiosflags (ios_base::fmtflags mask);
    /*T3*/ setbase(int base);
    template<charT> /*T4*/ setfill(charT c);
    /*T5*/ setprecision(int n);
    /*T6*/ setw(int n);
    template <class moneyT> /*T7*/ get_money(moneyT& mon, bool intl = false);
    template <class moneyT> /*T8*/ put_money(const moneyT& mon, bool intl = false);
    template <class charT> /*T9*/ get_time(struct tm* tmb, const charT* fmt);
    template <class charT> /*T10*/ put_time(const struct tm* tmb, const charT* fmt);
    template <class CharT>
    /*T11*/ quoted(const CharT* s,
            CharT delim = CharT('"'), CharT escape = CharT('\\'));
    template <class CharT, class Traits, class Allocator>
    /*T12*/ quoted(const std::basic_string<CharT, Traits, Allocator>& s,
            CharT delim = CharT('"'), CharT escape = CharT('\\'));
    template< class CharT, class Traits>
    /*T13*/ quoted(std::basic_string_view<CharT, Traits> s,
            CharT delim = CharT('"'), CharT escape = CharT('\\'));
    template< class CharT, class Traits, class Allocator >
    /*T14*/ quoted(std::basic_string<CharT, Traits, Allocator>& s,
            CharT delim = CharT('"'), CharT escape = CharT('\\'));
}