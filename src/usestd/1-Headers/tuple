
namespace std {
    // 类模板 tuple:
    template <class... Types> class tuple;
 
    // tuple 创建函数：
    const /*unspecified*/ ignore;
    template <class... Types>
        tuple<VTypes...> make_tuple(Types&&...);
    template <class... Types>
        tuple<Types...> forward_as_tuple(Types&&...) noexcept;
    template<class... Types>
        tuple<Types&...> tie(Types&...) noexcept;
    template <class... Tuples>
        tuple<Tuples...> tuple_cat(Tuples&&...);
 
    // 以参数的 tuple 调用函数
    template <class F, class Tuple>
    constexpr decltype(auto) apply(F&& f, Tuple&& t);
 
    template <class T, class Tuple>
    constexpr T make_from_tuple(Tuple&& t);
 
    // tuple 辅助类：
    template <class T> class tuple_size; // 不定义
    template <class T> class tuple_size<const T>;
    template <class T> class tuple_size<volatile T>;
    template <class T> class tuple_size<const volatile T>;
    template <class... Types> class tuple_size<tuple<Types...> >;
 
    template <size_t I,  class   T>     class tuple_element; // 不定义
    template <size_t I,  class   T>     class tuple_element<I, const T>;
    template <size_t I,  class   T>     class tuple_element<I, volatile T>;
    template <size_t I,  class   T>     class tuple_element<I, const volatile T>;
    template <size_t I, class... Types> class tuple_element<I, tuple<Types...> >;
 
    // 元素访问：
    template <size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>&
      get(tuple<Types...>&) noexcept;
    template <size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>&&
      get(tuple<Types...>&&) noexcept;
    template <size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>&
      get(const tuple<Types...>&) noexcept;
    template <size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>&& 
      get(const tuple<Types...>&&) noexcept;
    template <class T, class... Types>
      constexpr T& get(tuple<Types...>& t) noexcept;
    template <class T, class... Types>
      constexpr T&& get(tuple<Types...>&& t) noexcept;
    template <class T, class... Types>
      constexpr const T& get(const tuple<Types...>& t) noexcept;
    template <class T, class... Types>
      constexpr const T&& get(const tuple<Types...>&& t) noexcept;
 
    // 关系运算符：
    template<class... TTypes, class... UTypes>
        bool operator==(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
        bool operator<(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
        bool operator!=(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
        bool operator>(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
        bool operator<=(const tuple<TTypes...>&, const tuple<UTypes...>&);
    template<class... TTypes, class... UTypes>
        bool operator>=(const tuple<TTypes...>&, const tuple<UTypes...>&);
 
    // 分配器相关特性
    template <class... Types, class Alloc>
        struct uses_allocator<tuple<Types...>, Alloc>;
    // 特化的算法：
    template <class... Types>
        void swap(tuple<Types...>& x, tuple<Types...>& y) noexcept(x.swap(y));
    // tuple 辅助类
    template <class T> constexpr size_t tuple_size_v = tuple_size<T>::value;
}


///类 std::tuple
template <class... Types>
class tuple {
public:
  // tuple 构造
  /*conditionally-explicit*/ constexpr tuple();
  // 仅若 sizeof...(Types) >= 1
  /*conditionally-explicit*/ constexpr tuple(const Types&...); 
  // 仅若 sizeof...(Types) >= 1
  template <class... UTypes>
  /*conditionally-explicit*/ constexpr tuple(UTypes&&...); 
  tuple(const tuple&) = default;
  tuple(tuple&&) = default;
  template <class... UTypes>
  /*conditionally-explicit*/ constexpr tuple(const tuple<UTypes...>&);
  template <class... UTypes>
  /*conditionally-explicit*/ constexpr tuple(tuple<UTypes...>&&);
  // 仅若 sizeof...(Types) == 2
  template <class U1, class U2>
  /*conditionally-explicit*/ constexpr tuple(const pair<U1, U2>&);
  // 仅若 sizeof...(Types) == 2
  template <class U1, class U2>
  /*conditionally-explicit*/ constexpr tuple(pair<U1, U2>&&); 
 
  // 分配器扩展的构造函数
  template <class Alloc>
  tuple(allocator_arg_t, const Alloc& a);
  template <class Alloc>
  /*conditionally-explicit*/ tuple(allocator_arg_t, const Alloc& a, const Types&...);
  template <class Alloc, class... UTypes>
  /*conditionally-explicit*/ tuple(allocator_arg_t, const Alloc& a, UTypes&&...);
  template <class Alloc>
  tuple(allocator_arg_t, const Alloc& a, const tuple&);
  template <class Alloc>
  tuple(allocator_arg_t, const Alloc& a, tuple&&);
  template <class Alloc, class... UTypes>
  /*conditionally-explicit*/ tuple(allocator_arg_t,
                                   const Alloc& a, const tuple<UTypes...>&);
  template <class Alloc, class... UTypes>
  /*conditionally-explicit*/ tuple(allocator_arg_t,
                                   const Alloc& a, tuple<UTypes...>&&);
  template <class Alloc, class U1, class U2>
  /*conditionally-explicit*/ tuple(allocator_arg_t,
                                   const Alloc& a, const pair<U1, U2>&);
  template <class Alloc, class U1, class U2>
  /*conditionally-explicit*/ tuple(allocator_arg_t,
                                   const Alloc& a, pair<U1, U2>&&);
 
  // tuple 赋值
  tuple& operator=(const tuple&);
  tuple& operator=(tuple&&) noexcept(see below );
  template <class... UTypes>
  tuple& operator=(const tuple<UTypes...>&);
  template <class... UTypes>
  tuple& operator=(tuple<UTypes...>&&);
  template <class U1, class U2>
  tuple& operator=(const pair<U1, U2>&); // 仅若 sizeof...(Types) == 2
  template <class U1, class U2>
  tuple& operator=(pair<U1, U2>&&); // 仅若 sizeof...(Types) == 2
 
  // tuple 交换
  void swap(tuple&) noexcept(/*conditional*/);
};